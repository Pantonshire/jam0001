
//basic definitions
digit = {'0'..'9'}
alpha = {('a'..'z'|'A'..'Z')+}
number = {digit+}
alphanumeric = {(alpha|number)+}
literal = {alpha | alpha ~ alphanumeric}
string = {"\"" ~ literal ~ "\""}

//expressions
expr  = { equality }
equality    = { comparison ~ ( ( "!=" | "==" ) ~  comparison )*}
comparison  = { termOr ~ (( ">" | ">=" | "<" | "<=" ) ~ termOr )*}
termOr      = {factorAnd ~  ( ( "-" | "+" ) ~  factorAnd )*}
factorAnd   = {unary ~ ( "/" | "*" | "and") ~  unary | unary }
unary       = {("not" | "-") ~ unary | primary}
primary     = {number | alphanumeric | "true" | "false" | string | "(" ~ expr~")"}

//statements
varStmt = {"stores" ~ " " ~ expr ~ " in " ~ literal}
loopStmt = {"repeat "~ "(" ~ stmt ~ ") " ~ number ~ " times"}
printStmt = {("prints " | "print ") ~ string}
listStmt = {literal | literal ~ "," ~ listStmt}
argsStmt = {"takes " ~ listStmt}
condStmt = {"if " ~ expr ~ " then " ~ stmt}
stmt = {argsStmt | varStmt | loopStmt | printStmt | condStmt}
comment = {(stmt ~ (" ")*|literal~ (" ")* )+ }
commentStmt = {"//" ~ comment ~ "\n" ~ literal | "//" ~ comment}
semanticBody = {commentStmt ~ ("\n" ~ semanticBody)*}
syntaxBody = {"\n" ~ ("\n"|" ")* ~ "main {" ~ (("\n")*~mainStmt~("\n")*)* ~ "}"}
mainStmt = {literal ~"<-"~ mainStmt | literal ~ "(" ~ mainStmt ~ ")"|literal}
program = {semanticBody ~ syntaxBody|semanticBody}

//This is a function that stores 6 in x and then prints "hi"
example
//print "hello world"
hello
//6 + 3
expr1
//Store an expression using stores () in a and then print a
b
//On the other hand we save a statemet using stores <>
c

main {
example
b(expr1)
c(a)
}

//run literals will run the program specified below it
run
example
b(expr1)
b(a)
c(hello)
